1, cannot use alloca ..., addrspace(x) to alloca a memory with address space x.

2, document says half/float/double only allow 16 bit format but they can actually use use any number in clang.

3, u0x and s0x hex int number is just garbage in LLVM. 

4, x86_fp80 does not support 1.0 format constant but the LLVM document does not specify this. It is either the problem with LLVM or the problem with clang.

5, LLVM does not check the number of hexadecimal constants.

6, sometimes, zero and negative zero are not equal in LLVM.

7, frem is error-prone. what is allowed input is not clear.

8, fptrunc is able to cast a vector of float to a vector of float but the document says that it cannot.

9, fptrunc float to half is not valid

10, 1.25 cannot be a constant of fp128, which is not discribed in the document.

11, cannot use bitcast to cast a fp128 to a ppc_fp128 type.

12, clang does not think ppc_fp128 is smaller than fp128, that will create a problem that there is no way to cast a fp128 to a ppc_fp128 and a ppc_fp128 to a fp128. It does not say and define in the llvm document.

13, casting a negative float to a unsigned int by fptoui is undefined behavior

14, uitofp/sitofp document needs to be very specific that the not fit in the float value means both exp and mantissa.

15, the document of LLVM does not say that the index of extractvalue/insertvalue must be integer.

16, cannot compile a single invoke op successfully.

17, the document claims that the input point for the cmpxchg op must have enough alignment > the size of the operand, but the clang implementation never implements such check.

18, the statement of claiming that cmpxchg order1 must be stronger than order2 is not clear. In addition, the clang implementation allows cmpxchg success order to be release while failure order to be acquire, which makes no sense.

19, if cmpxchg requires that the alloca field has an alignment requirement, why does atomicrmw does not have such restriction.

20, load operator does not return undef when a race happens.

21, LLVM IR does not check input conditions of library functions such as printf.

22, /*
   <result> = trunc <ty> <value> to <ty2>             ; yields ty2
    LLVM documentation mistake. trunc is not just working on values.
*/
/*
    rule typeCheckConstExpr(T:FPType, constBinAST(Op:FloatOps Fl:FastMathFlags,
                                T1:K, V1:K, T2:K, V2:K))
          => typeCheckConstExprs(T,
               (val(typeOperand(T1,V1)),val(typeOperand(T2,V2)),.ElemList))
    rule typeCheckConstExpr(vectorTypeValue(T:FPType, I:Int),
              constBinAST(Op:FloatOps Fl:FastMathFlags, T1:K, V1:K, T2:K, V2:K))
          => typeCheckConstExprs(vectorTypeValue(T:FPType, I:Int),
               (val(typeOperand(T1,V1)),val(typeOperand(T2,V2)),.ElemList))
*/

22. 32767 is not able to put in the range of a half but Clang allows it.
